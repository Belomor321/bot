import pandas as pd
import os
TOKEN = os.getenv("BOT_TOKEN")
import logging
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    InlineQueryResultArticle,
    InputTextMessageContent
)
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    InlineQueryHandler,
    ContextTypes
)
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
drinks_data = None

def load_drinks():
    global drinks_data
    if drinks_data is None:
        try:
            drinks_data = pd.read_excel(
                "data/–ù–∞–ø–∏—Ç–∫–∏ –ö–°–í 1.0 (1).xlsx", 
                sheet_name=None,
                engine='openpyxl'
            )
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π DataFrame –¥–ª—è –ø–æ–∏—Å–∫–∞
            all_drinks = []
            for sheet_name, df in drinks_data.items():
                df['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] = sheet_name
                all_drinks.append(df)
            
            drinks_data['–í—Å–µ'] = pd.concat(all_drinks, ignore_index=True)
            logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    return drinks_data

def format_abv(value):
    try:
        if isinstance(value, str) and '%' in value:
            return value
        
        num = float(value)
        
        if num < 1:
            result = num * 100
            return f"{result:.1f}%".rstrip('0').rstrip('.') + "%"
        
        return f"{num:.1f}%".rstrip('0').rstrip('.') + "%"
    except:
        return "‚Äî"

def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", switch_inline_query_current_chat="")],
        [InlineKeyboardButton("ü•É –í–∏—Å–∫–∏", callback_data="category_–í–∏—Å–∫–∏"),
         InlineKeyboardButton("üè¥‚Äç‚ò†Ô∏è –†–æ–º", callback_data="category_–†–æ–º")],
        [InlineKeyboardButton("üç∂ –¢–µ–∫–∏–ª–∞", callback_data="category_–¢–µ–∫–∏–ª–∞"),
         InlineKeyboardButton("ü•Ç –ö–æ–Ω—å—è–∫", callback_data="category_–ö–æ–Ω—å—è–∫ –∏ –±—Ä–µ–Ω–¥–∏")],
        [InlineKeyboardButton("üåÄ –î–∂–∏–Ω", callback_data="category_–î–∂–∏–Ω"),
         InlineKeyboardButton("ü•õ –í–æ–¥–∫–∞", callback_data="category_–í–æ–¥–∫–∞")],
        [InlineKeyboardButton("üçπ –ö–æ–∫—Ç–µ–π–ª–∏", callback_data="category_–ö–ª–∞—Å—Å–∏–∫–∞")]
    ])

def back_buttons(category):
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"category_{category}")],
        [InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]
    ])

def format_drink(drink, is_cocktail=False):
    response = f"<b>{drink['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}</b>\n"
    response += f"<i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {drink['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']}</i>\n\n"
    
    fields = {
        "üåç –°—Ç—Ä–∞–Ω–∞": drink.get('–°—Ç—Ä–∞–Ω–∞'),
        "‚ö° –ö—Ä–µ–ø–æ—Å—Ç—å": format_abv(drink.get('–ö—Ä–µ–ø–æ—Å—Ç—å')),
        "üëÖ –í–∫—É—Å": drink.get('–í–∫—É—Å'),
        "üëÉ –ê—Ä–æ–º–∞—Ç": drink.get('–ê—Ä–æ–º–∞—Ç'),
        "üåæ –°—ã—Ä—å–µ": drink.get('–°—ã—Ä—å–µ/–°–æ—Ä—Ç –≤–∏–Ω–æ–≥—Ä–∞–¥–∞'),
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ": drink.get('–û–ø–∏—Å–∞–Ω–∏–µ')
    } if not is_cocktail else {
        "‚ö° –ö—Ä–µ–ø–æ—Å—Ç—å": format_abv(drink.get('–ö—Ä–µ–ø–æ—Å—Ç—å')),
        "üëÖ –í–∫—É—Å": drink.get('–í–∫—É—Å'),
        "üëÉ –ê—Ä–æ–º–∞—Ç": drink.get('–ê—Ä–æ–º–∞—Ç'),
        "üì¶ –°–æ—Å—Ç–∞–≤": drink.get('–°–æ—Å—Ç–∞–≤'),
        "üîß –ú–µ—Ç–æ–¥": drink.get('–ú–µ—Ç–æ–¥ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è'),
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ": drink.get('–û–ø–∏—Å–∞–Ω–∏–µ')
    }
    
    for key, value in fields.items():
        if pd.notna(value) and value not in [None, "", "-"]:
            response += f"{key}: {value}\n"
    
    return response

async def search_results(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.inline_query.query.strip()
        logger.info(f"–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: '{query}'")
        
        if not query:
            return
        
        all_drinks = load_drinks()['–í—Å–µ']
        
        # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π NaN –∏ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        found = all_drinks[
            all_drinks['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].notna() &
            all_drinks['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.lower().str.contains(
                query.lower(), 
                na=False, 
                regex=False
            )
        ].head(20)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(found)}")
        
        results = []
        for idx, drink in found.iterrows():
            is_cocktail = (drink['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] == '–ö–ª–∞—Å—Å–∏–∫–∞')
            description = format_drink(drink, is_cocktail)
            
            results.append(
                InlineQueryResultArticle(
                    id=str(idx),
                    title=drink['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
                    description=f"{drink['–ö–∞—Ç–µ–≥–æ—Ä–∏—è']} ‚Ä¢ {format_abv(drink.get('–ö—Ä–µ–ø–æ—Å—Ç—å'))}",
                    input_message_content=InputTextMessageContent(
                        message_text=description,
                        parse_mode="HTML"
                    )
                )
            )
        
        await update.inline_query.answer(results)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {e}")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        if query.data == "main_menu":
            await query.edit_message_text(
                "üç∏ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞–ø–∏—Ç–∫–æ–≤:",
                reply_markup=main_menu(),
                parse_mode="HTML"
            )
            return
        
        if query.data.startswith("category_"):
            category = query.data.replace("category_", "")
            data = load_drinks().get(category)
            
            if data is None or data.empty:
                await query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            buttons = [
                InlineKeyboardButton(
                    row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'], 
                    callback_data=f"drink_{category}_{idx}"
                )
                for idx, row in data.iterrows()
            ]
            
            keyboard = [buttons[i:i+2] for i in range(0, len(buttons), 2)]
            keyboard.append([InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")])
            
            await query.edit_message_text(
                f"üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–∏—Ç–æ–∫ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}:",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="HTML"
            )
        
        elif query.data.startswith("drink_"):
            _, category, index = query.data.split("_")
            data = load_drinks().get(category)
            
            try:
                drink = data.loc[int(index)]
                is_cocktail = (category == "–ö–ª–∞—Å—Å–∏–∫–∞")
                response = format_drink(drink, is_cocktail)
                await query.edit_message_text(
                    response,
                    reply_markup=back_buttons(category),
                    parse_mode="HTML"
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞–ø–∏—Ç–∫–∞: {e}")
                await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üç∏ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ü–∏—Ñ—Ä–æ–≤—É—é –±–∞—Ä–Ω—É—é –∫–∞—Ä—Ç—É!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        "‚Ä¢ –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n"
        "‚Ä¢ @–∏–º—è_–±–æ—Ç–∞ [–Ω–∞–∑–≤–∞–Ω–∏–µ] –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
        "‚Ä¢ /start –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é",
        reply_markup=main_menu(),
        parse_mode="HTML"
    )

if __name__ == "__main__":
    try:
        app = Application.builder().token(os.getenv("BOT_TOKEN")).build()
        
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CallbackQueryHandler(button_handler))
        app.add_handler(InlineQueryHandler(search_results))
        
        logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
        app.run_polling()
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
